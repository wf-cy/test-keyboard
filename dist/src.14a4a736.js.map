{"version":3,"sources":["../../webpack/universalModuleDefinition","../../webpack/bootstrap","services/PhysicalKeyboard.js","services/KeyboardLayout.js","services/Utilities.js","components/Keyboard.js","index.js","src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","PhysicalKeyboard","simpleKeyboardInstance","this","initKeyboardListener","getSimpleKeyboardLayoutKey","_this","document","addEventListener","event","options","physicalKeyboardHighlight","buttonPressed","dispatch","instance","buttonDOM","getButtonElement","concat","style","backgroundColor","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","removeAttribute","output","code","includes","toUpperCase","Number","isInteger","length","toLowerCase","KeyboardLayout","default","shift","Utilities","bindMethods","myClass","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","getOwnPropertyNames","iterator","next","done","myMethod","err","return","button","buttonTypeClass","buttonWithoutBraces","replace","buttonNormalized","display","mergeDisplay","assign","getDefaultDiplay","input","caretPos","moveCaret","removeAt","addStringAt","tabCharOnTab","newLineOnEnter","minus","newCaretPos","updateCaretPosAction","syncInstanceInputs","caretPosition","debug","console","log","keyboardDOMClass","source","string","position","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","navigator","maxTouchPoints","PointerEvent","trim","split","reduce","word","array","x","SimpleKeyboard","registerModule","initCallback","keyboardDOMQuery","arguments","Keyboard_typeof","utilities","keyboardDOM","querySelector","layoutName","theme","preventMouseDownDefault","keyboardPluginClasses","buttonElements","warn","Error","render","camelCase","physicalKeyboardInterface","loadModules","onKeyPress","getUpdatedInput","inputPattern","inputPatternIsValid","handleMaxLength","onChange","onChangeAll","e","_this2","preventDefault","stopMouseDownPropagation","stopPropagation","isMouseHold","holdInteractionTimeout","clearTimeout","holdTimeout","disableButtonHold","setTimeout","handleButtonHold","_this3","handleButtonClicked","_this4","replaceInput","onSetOptions","innerHTML","className","callback","keys","forEach","buttons","_this5","classNameItem","buttonTheme","classNameFound","map","class","buttonThemeArray","push","_this6","Array","isArray","index","filteredButtonArray","filter","item","splice","buttonArr","inputVal","inputPatternRaw","RegExp","didInputMatch","test","simpleKeyboardInstances","caretEventHandler","targetTagName","target","tagName","disableCaretPositioning","selectionStart","removeEventListener","clear","_this7","buttonThemesParsed","themeObj","themeButtons","themeButton","themeParsed","countInArray","processAutoTouchEvents","disableContextualWindow","oncontextmenu","classList","contains","autoUseTouchEvents","useTouchEvents","handleCaret","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","_this8","Module","constructor","classStr","init","prop","rowDOM","rowIndex","containerStartIndexes","containerEndIndexes","_this9","rowDOMArray","from","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","createElement","containerUID","setAttribute","containedElements","element","appendChild","_this10","initialized","layoutClass","layout","getDefaultLayout","useTouchEventsClass","disableRowButtonContainers","getButtonTheme","row","rIndex","rowArray","bIndex","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonThemeClass","buttonDisplayName","getButtonDisplayName","buttonType","useButtonTag","ontouchstart","handleButtonMouseDown","ontouchend","handleButtonMouseUp","ontouchcancel","onclick","onmousedown","onpointerdown","onpointerup","onpointercancel","buttonUID","buttonSpanDOM","parseRowDOMContainers","onmouseup","keyboard","Keyboard","handleShift","currentLayout","shiftToggle","setOptions","setInput"],"mappings":"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","file":"src.14a4a736.js","sourceRoot":"..","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SimpleKeyboard\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor(simpleKeyboardInstance) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.simpleKeyboardInstance = simpleKeyboardInstance;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    this.initKeyboardListener = this.initKeyboardListener.bind(this);\r\n    this.getSimpleKeyboardLayoutKey = this.getSimpleKeyboardLayoutKey.bind(\r\n      this\r\n    );\r\n\r\n    /**\r\n     * Initialize key listeners\r\n     */\r\n    this.initKeyboardListener();\r\n  }\r\n\r\n  /**\r\n   * Initializes key event listeners\r\n   */\r\n  initKeyboardListener() {\r\n    // Adding button style on keydown\r\n    document.addEventListener(\"keydown\", event => {\r\n      if (this.simpleKeyboardInstance.options.physicalKeyboardHighlight) {\r\n        let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n        this.simpleKeyboardInstance.dispatch(instance => {\r\n          let buttonDOM =\r\n            instance.getButtonElement(buttonPressed) ||\r\n            instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n          if (buttonDOM) {\r\n            buttonDOM.style.backgroundColor =\r\n              this.simpleKeyboardInstance.options\r\n                .physicalKeyboardHighlightBgColor || \"#9ab4d0\";\r\n            buttonDOM.style.color =\r\n              this.simpleKeyboardInstance.options\r\n                .physicalKeyboardHighlightTextColor || \"white\";\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Removing button style on keyup\r\n    document.addEventListener(\"keyup\", event => {\r\n      if (this.simpleKeyboardInstance.options.physicalKeyboardHighlight) {\r\n        let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n        this.simpleKeyboardInstance.dispatch(instance => {\r\n          let buttonDOM =\r\n            instance.getButtonElement(buttonPressed) ||\r\n            instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n          if (buttonDOM && buttonDOM.removeAttribute) {\r\n            buttonDOM.removeAttribute(\"style\");\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} event The KeyboardEvent\r\n   */\r\n  getSimpleKeyboardLayoutKey(event) {\r\n    let output;\r\n\r\n    if (\r\n      event.code.includes(\"Numpad\") ||\r\n      event.code.includes(\"Shift\") ||\r\n      event.code.includes(\"Space\") ||\r\n      event.code.includes(\"Backspace\") ||\r\n      event.code.includes(\"Control\") ||\r\n      event.code.includes(\"Alt\") ||\r\n      event.code.includes(\"Meta\")\r\n    ) {\r\n      output = event.code;\r\n    } else {\r\n      output = event.key;\r\n    }\r\n\r\n    /**\r\n     * If button is not uppercase, casting to lowercase\r\n     */\r\n    if (\r\n      output !== output.toUpperCase() ||\r\n      (event.code[0] === \"F\" &&\r\n        Number.isInteger(Number(event.code[1])) &&\r\n        event.code.length <= 3)\r\n    ) {\r\n      output = output.toLowerCase();\r\n    }\r\n\r\n    return output;\r\n  }\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","/**\r\n * Keyboard Layout Service\r\n */\r\nclass KeyboardLayout {\r\n  /**\r\n   * Get default simple-keyboard layout\r\n   * @return {object} The default layout (US-QWERTY)\r\n   */\r\n  static getDefaultLayout() {\r\n    return {\r\n      default: [\r\n        \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n        \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n        \"{lock} a s d f g h j k l ; ' {enter}\",\r\n        \"{shift} z x c v b n m , . / {shift}\",\r\n        \".com @ {space}\"\r\n      ],\r\n      shift: [\r\n        \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n        \"{tab} Q W E R T Y U I O P { } |\",\r\n        '{lock} A S D F G H J K L : \" {enter}',\r\n        \"{shift} Z X C V B N M < > ? {shift}\",\r\n        \".com @ {space}\"\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\nexport default KeyboardLayout;\r\n","/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor(simpleKeyboardInstance) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.simpleKeyboardInstance = simpleKeyboardInstance;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button) {\r\n    let buttonTypeClass =\r\n      button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\"\r\n        ? \"functionBtn\"\r\n        : \"standardBtn\";\r\n    let buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = \"\";\r\n\r\n    if (buttonTypeClass !== \"standardBtn\")\r\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDiplay() {\r\n    return {\r\n      \"{bksp}\": \"backspace\",\r\n      \"{backspace}\": \"backspace\",\r\n      \"{enter}\": \"< enter\",\r\n      \"{shift}\": \"shift\",\r\n      \"{shiftleft}\": \"shift\",\r\n      \"{shiftright}\": \"shift\",\r\n      \"{alt}\": \"alt\",\r\n      \"{s}\": \"shift\",\r\n      \"{tab}\": \"tab\",\r\n      \"{lock}\": \"caps\",\r\n      \"{capslock}\": \"caps\",\r\n      \"{accept}\": \"Submit\",\r\n      \"{space}\": \" \",\r\n      \"{//}\": \" \",\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      \"{numpaddivide}\": \"/\",\r\n      \"{numlock}\": \"lock\",\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\"\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button, display, mergeDisplay) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDiplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDiplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {object} options The simple-keyboard options object\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button, input, options, caretPos, moveCaret) {\r\n    let output = input;\r\n\r\n    if (\r\n      (button === \"{bksp}\" || button === \"{backspace}\") &&\r\n      output.length > 0\r\n    ) {\r\n      output = this.removeAt(output, caretPos, moveCaret);\r\n    } else if (button === \"{space}\")\r\n      output = this.addStringAt(output, \" \", caretPos, moveCaret);\r\n    else if (\r\n      button === \"{tab}\" &&\r\n      !(\r\n        typeof options.tabCharOnTab === \"boolean\" &&\r\n        options.tabCharOnTab === false\r\n      )\r\n    ) {\r\n      output = this.addStringAt(output, \"\\t\", caretPos, moveCaret);\r\n    } else if (\r\n      (button === \"{enter}\" || button === \"{numpadenter}\") &&\r\n      options.newLineOnEnter\r\n    )\r\n      output = this.addStringAt(output, \"\\n\", caretPos, moveCaret);\r\n    else if (\r\n      button.includes(\"numpad\") &&\r\n      Number.isInteger(Number(button[button.length - 2]))\r\n    ) {\r\n      output = this.addStringAt(\r\n        output,\r\n        button[button.length - 2],\r\n        caretPos,\r\n        moveCaret\r\n      );\r\n    } else if (button === \"{numpaddivide}\")\r\n      output = this.addStringAt(output, \"/\", caretPos, moveCaret);\r\n    else if (button === \"{numpadmultiply}\")\r\n      output = this.addStringAt(output, \"*\", caretPos, moveCaret);\r\n    else if (button === \"{numpadsubtract}\")\r\n      output = this.addStringAt(output, \"-\", caretPos, moveCaret);\r\n    else if (button === \"{numpadadd}\")\r\n      output = this.addStringAt(output, \"+\", caretPos, moveCaret);\r\n    else if (button === \"{numpaddecimal}\")\r\n      output = this.addStringAt(output, \".\", caretPos, moveCaret);\r\n    else if (button === \"{\" || button === \"}\")\r\n      output = this.addStringAt(output, button, caretPos, moveCaret);\r\n    else if (!button.includes(\"{\") && !button.includes(\"}\"))\r\n      output = this.addStringAt(output, button, caretPos, moveCaret);\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length, minus) {\r\n    let newCaretPos = this.updateCaretPosAction(\r\n      this.simpleKeyboardInstance,\r\n      length,\r\n      minus\r\n    );\r\n\r\n    if (this.simpleKeyboardInstance.options.syncInstanceInputs) {\r\n      this.simpleKeyboardInstance.dispatch(instance => {\r\n        instance.caretPosition = newCaretPos;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {object} instance The instance whose position should be updated\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(instance, length, minus) {\r\n    if (minus) {\r\n      if (instance.caretPosition > 0)\r\n        instance.caretPosition = instance.caretPosition - length;\r\n    } else {\r\n      instance.caretPosition = instance.caretPosition + length;\r\n    }\r\n\r\n    if (this.simpleKeyboardInstance.options.debug) {\r\n      console.log(\r\n        \"Caret at:\",\r\n        instance.caretPosition,\r\n        `(${instance.keyboardDOMClass})`\r\n      );\r\n    }\r\n\r\n    return instance.caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} string The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source, string, position, moveCaret) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + string;\r\n    } else {\r\n      output = [source.slice(0, position), string, source.slice(position)].join(\r\n        \"\"\r\n      );\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(string.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source, position, moveCaret) {\r\n    if (this.simpleKeyboardInstance.caretPosition === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n    let prevTwoChars;\r\n    let emojiMatched;\r\n    let emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n    /**\r\n     * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n     * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n     */\r\n    if (position && position >= 0) {\r\n      prevTwoChars = source.substring(position - 2, position);\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position - 2) + source.substr(position);\r\n        if (moveCaret) this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.substr(0, position - 1) + source.substr(position);\r\n        if (moveCaret) this.updateCaretPos(1, true);\r\n      }\r\n    } else {\r\n      prevTwoChars = source.slice(-2);\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.slice(0, -2);\r\n        if (moveCaret) this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.slice(0, -1);\r\n        if (moveCaret) this.updateCaretPos(1, true);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {object} options\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj, options, updatedInput) {\r\n    let maxLength = options.maxLength;\r\n    let currentInput = inputObj[options.inputName];\r\n    let condition = currentInput.length === maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === \"object\") {\r\n      let condition = currentInput.length === maxLength[options.inputName];\r\n\r\n      if (options.debug) {\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass, instance) {\r\n    for (let myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      let excludeMethod =\r\n        myMethod === \"constructor\" || myMethod === \"bindMethods\";\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} string The string to transform.\r\n   */\r\n  camelCase(string) {\r\n    return string\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((string, word) =>\r\n        word.length ? string + word[0].toUpperCase() + word.slice(1) : string\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Counts the number of duplicates in a given array\r\n   *\r\n   * @param  {Array} array The haystack to search in\r\n   * @param  {string} value The needle to search for\r\n   */\r\n  countInArray(array, value) {\r\n    return array.reduce((n, x) => n + (x === value), 0);\r\n  }\r\n}\r\n\r\nexport default Utilities;\r\n","import \"./Keyboard.css\";\r\n\r\n// Services\r\nimport PhysicalKeyboard from \"../services/PhysicalKeyboard\";\r\nimport KeyboardLayout from \"../services/KeyboardLayout\";\r\nimport Utilities from \"../services/Utilities\";\r\n\r\n/**\r\n * Root class for simple-keyboard\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} params If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(...params) {\r\n    let keyboardDOMQuery =\r\n      typeof params[0] === \"string\" ? params[0] : \".simple-keyboard\";\r\n    let options = typeof params[0] === \"object\" ? params[0] : params[1];\r\n\r\n    if (!options) options = {};\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities(this);\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = document.querySelector(keyboardDOMQuery);\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {Array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     */\r\n    this.options = options;\r\n    this.options.layoutName = this.options.layoutName || \"default\";\r\n    this.options.theme = this.options.theme || \"hg-theme-default\";\r\n    this.options.inputName = this.options.inputName || \"default\";\r\n    this.options.preventMouseDownDefault =\r\n      this.options.preventMouseDownDefault || false;\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = \"\";\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * let input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    this.input = {};\r\n    this.input[this.options.inputName] = \"\";\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMQuery.split(\".\").join(\"\");\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\"${keyboardDOMQuery}\" was not found in the DOM.`);\r\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\r\n    }\r\n\r\n    /**\r\n     * Saving instance\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!window[\"SimpleKeyboardInstances\"])\r\n      window[\"SimpleKeyboardInstances\"] = {};\r\n\r\n    window[\"SimpleKeyboardInstances\"][\r\n      this.utilities.camelCase(this.keyboardDOMClass)\r\n    ] = this;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboardInterface = new PhysicalKeyboard(this);\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button) {\r\n    let debug = this.options.debug;\r\n\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === \"{//}\") return false;\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === \"function\")\r\n      this.options.onKeyPress(button);\r\n\r\n    if (!this.input[this.options.inputName])\r\n      this.input[this.options.inputName] = \"\";\r\n\r\n    let updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[this.options.inputName],\r\n      this.options,\r\n      this.caretPosition\r\n    );\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[this.options.inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (\r\n        this.options.maxLength &&\r\n        this.utilities.handleMaxLength(this.input, this.options, updatedInput)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      this.input[this.options.inputName] = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[this.options.inputName],\r\n        this.options,\r\n        this.caretPosition,\r\n        true\r\n      );\r\n\r\n      if (debug) console.log(\"Input changed:\", this.input);\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === \"function\")\r\n        this.options.onChange(this.input[this.options.inputName]);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === \"function\")\r\n        this.options.onChangeAll(this.input);\r\n    }\r\n\r\n    if (debug) {\r\n      console.log(\"Key pressed:\", button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button, e) {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n    if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.isMouseHold = true;\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = setTimeout(() => {\r\n        if (\r\n          this.isMouseHold &&\r\n          ((!button.includes(\"{\") && !button.includes(\"}\")) ||\r\n            button === \"{delete}\" ||\r\n            button === \"{backspace}\" ||\r\n            button === \"{bksp}\" ||\r\n            button === \"{space}\" ||\r\n            button === \"{tab}\")\r\n        ) {\r\n          if (this.options.debug) console.log(\"Button held:\", button);\r\n\r\n          this.handleButtonHold(button, e);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp() {\r\n    this.isMouseHold = false;\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button) {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = setTimeout(() => {\r\n      if (this.isMouseHold) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs() {\r\n    this.dispatch(instance => {\r\n      instance.replaceInput(this.input);\r\n      instance.caretPosition = this.caretPosition;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.caretPosition = 0;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n\r\n    return this.input[inputName];\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input, inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj) {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options) {\r\n    options = options || {};\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    /**\r\n     * Some option changes require adjustments before re-render\r\n     */\r\n    this.onSetOptions(options);\r\n\r\n    /**\r\n     * Rendering\r\n     */\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(options) {\r\n    if (options.inputName) {\r\n      /**\r\n       * inputName changed. This requires a caretPosition reset\r\n       */\r\n      if (this.options.debug) {\r\n        console.log(\"inputName changed. caretPosition reset.\");\r\n      }\r\n\r\n      this.caretPosition = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used interally between re-renders.\r\n   */\r\n  clear() {\r\n    this.keyboardDOM.innerHTML = \"\";\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  dispatch(callback) {\r\n    if (!window[\"SimpleKeyboardInstances\"]) {\r\n      console.warn(\r\n        `SimpleKeyboardInstances is not defined. Dispatch cannot be called.`\r\n      );\r\n      throw new Error(\"INSTANCES_VAR_ERROR\");\r\n    }\r\n\r\n    return Object.keys(window[\"SimpleKeyboardInstances\"]).forEach(key => {\r\n      callback(window[\"SimpleKeyboardInstances\"][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons, className) {\r\n    if (!className || !buttons) return false;\r\n\r\n    buttons.split(\" \").forEach(button => {\r\n      className.split(\" \").forEach(classNameItem => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map(buttonTheme => {\r\n          if (buttonTheme.class.split(\" \").includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            let buttonThemeArray = buttonTheme.buttons.split(\" \");\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons, className) {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (\r\n      buttons &&\r\n      Array.isArray(this.options.buttonTheme) &&\r\n      this.options.buttonTheme.length\r\n    ) {\r\n      let buttonArray = buttons.split(\" \");\r\n      buttonArray.forEach((button, key) => {\r\n        this.options.buttonTheme.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if (\r\n            (className && className.includes(buttonTheme.class)) ||\r\n            !className\r\n          ) {\r\n            let filteredButtonArray = buttonTheme.buttons\r\n              .split(\" \")\r\n              .filter(item => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (filteredButtonArray.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\r\n            } else {\r\n              this.options.buttonTheme.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button) {\r\n    let output;\r\n\r\n    let buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal) {\r\n    let inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      let didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          `inputPattern (\"${inputPattern}\"): ${\r\n            didInputMatch ? \"passed\" : \"did not pass!\"\r\n          }`\r\n        );\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the current cursor position within a input or textarea (if any)\r\n   */\r\n  handleCaret() {\r\n    /**\r\n     * Only first instance should insall the caret handling events\r\n     */\r\n    this.caretPosition = null;\r\n    let simpleKeyboardInstances = window[\"SimpleKeyboardInstances\"];\r\n\r\n    if (\r\n      (simpleKeyboardInstances &&\r\n        Object.keys(simpleKeyboardInstances)[0] ===\r\n          this.utilities.camelCase(this.keyboardDOMClass)) ||\r\n      !simpleKeyboardInstances\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      document.addEventListener(\"keyup\", this.caretEventHandler);\r\n      document.addEventListener(\"mouseup\", this.caretEventHandler);\r\n      document.addEventListener(\"touchend\", this.caretEventHandler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called by {@link handleCaret} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event) {\r\n    let targetTagName;\r\n    if (event.target.tagName) {\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch(instance => {\r\n      if (instance.isMouseHold) {\r\n        instance.isMouseHold = false;\r\n      }\r\n\r\n      if (\r\n        (targetTagName === \"textarea\" || targetTagName === \"input\") &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        instance.caretPosition = event.target.selectionStart;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            \"Caret at: \",\r\n            event.target.selectionStart,\r\n            event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`\r\n          );\r\n        }\r\n      } else if (instance.options.disableCaretPositioning) {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.caretPosition = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy() {\r\n    /**\r\n     * Remove listeners\r\n     */\r\n    document.removeEventListener(\"keyup\", this.caretEventHandler);\r\n    document.removeEventListener(\"mouseup\", this.caretEventHandler);\r\n    document.removeEventListener(\"touchend\", this.caretEventHandler);\r\n\r\n    /**\r\n     * Clear DOM\r\n     */\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonTheme() {\r\n    let buttonThemesParsed = {};\r\n\r\n    this.options.buttonTheme.forEach(themeObj => {\r\n      if (themeObj.buttons && themeObj.class) {\r\n        let themeButtons;\r\n\r\n        if (typeof themeObj.buttons === \"string\") {\r\n          themeButtons = themeObj.buttons.split(\" \");\r\n        }\r\n\r\n        if (themeButtons) {\r\n          themeButtons.forEach(themeButton => {\r\n            let themeParsed = buttonThemesParsed[themeButton];\r\n\r\n            // If the button has already been added\r\n            if (themeParsed) {\r\n              // Making sure we don't add duplicate classes, even when buttonTheme has duplicates\r\n              if (\r\n                !this.utilities.countInArray(\r\n                  themeParsed.split(\" \"),\r\n                  themeObj.class\r\n                )\r\n              ) {\r\n                buttonThemesParsed[\r\n                  themeButton\r\n                ] = `${themeParsed} ${themeObj.class}`;\r\n              }\r\n            } else {\r\n              buttonThemesParsed[themeButton] = themeObj.class;\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        console.warn(\r\n          `buttonTheme row is missing the \"buttons\" or the \"class\". Please check the documentation.`\r\n        );\r\n      }\r\n    });\r\n\r\n    return buttonThemesParsed;\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = event => {\r\n      if (event.target.classList.contains(\"hg-button\")) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          `autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    /**\r\n     * Caret handling\r\n     */\r\n    this.handleCaret();\r\n\r\n    if (typeof this.options.onInit === \"function\") this.options.onInit();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === \"function\")\r\n      this.options.beforeFirstRender();\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log(\"Using PointerEvents as it is supported by this browser\");\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log(\r\n          \"useTouchEvents has been enabled. Only touch events will be used.\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === \"function\")\r\n      this.options.beforeRender();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === \"function\") this.options.onRender();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === \"function\")\r\n      this.options.onModulesLoaded();\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name, initCallback) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach(Module => {\r\n        let module = new Module();\r\n\r\n        /* istanbul ignore next */\r\n        if (module.constructor.name && module.constructor.name !== \"Function\") {\r\n          let classStr = `module-${this.utilities.camelCase(\r\n            module.constructor.name\r\n          )}`;\r\n          this.keyboardPluginClasses =\r\n            this.keyboardPluginClasses + ` ${classStr}`;\r\n        }\r\n\r\n        module.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses =\r\n        this.keyboardPluginClasses + \" modules-loaded\";\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name, prop) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM,\r\n    rowIndex,\r\n    containerStartIndexes,\r\n    containerEndIndexes\r\n  ) {\r\n    let rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        let endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        let updated_startIndex = startIndex - removedElements;\r\n        let updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        let containerDOM = document.createElement(\"div\");\r\n        containerDOM.className += \"hg-button-container\";\r\n        let containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute(\"data-skUID\", containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        let containedElements = rowDOMArray.splice(\r\n          updated_startIndex,\r\n          updated_endIndex - updated_startIndex + 1\r\n        );\r\n        removedElements = updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach(element => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = \"\";\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach(element => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log(\r\n            \"rowDOMContainer\",\r\n            containedElements,\r\n            updated_startIndex,\r\n            updated_endIndex,\r\n            removedElements + 1\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.clear();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    let layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    let layout = this.options.layout || KeyboardLayout.getDefaultLayout();\r\n    let useTouchEvents = this.options.useTouchEvents || false;\r\n    let useTouchEventsClass = useTouchEvents ? \"hg-touch-events\" : \"\";\r\n    let useMouseEvents = this.options.useMouseEvents || false;\r\n    let disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Account for buttonTheme, if set\r\n     */\r\n    let buttonThemesParsed = Array.isArray(this.options.buttonTheme)\r\n      ? this.getButtonTheme()\r\n      : {};\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className += ` ${this.options.theme} ${layoutClass} ${this.keyboardPluginClasses} ${useTouchEventsClass}`;\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName].forEach((row, rIndex) => {\r\n      let rowArray = row.split(\" \");\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement(\"div\");\r\n      rowDOM.className += \"hg-row\";\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      let containerStartIndexes = [];\r\n      let containerEndIndexes = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        let buttonHasContainerStart =\r\n          !disableRowButtonContainers &&\r\n          button.includes(\"[\") &&\r\n          button.length > 1;\r\n        let buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          button.includes(\"]\") &&\r\n          button.length > 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, \"\");\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, \"\");\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        let fctBtnClass = this.utilities.getButtonClass(button);\r\n        let buttonThemeClass = buttonThemesParsed[button];\r\n        let buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        let buttonType = this.options.useButtonTag ? \"button\" : \"div\";\r\n        let buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}${\r\n          buttonThemeClass ? \" \" + buttonThemeClass : \"\"\r\n        }`;\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (\r\n          this.utilities.pointerEventsSupported() &&\r\n          !useTouchEvents &&\r\n          !useMouseEvents\r\n        ) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = e => {\r\n            this.handleButtonClicked(button);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = e => {\r\n            this.handleButtonMouseUp();\r\n          };\r\n          buttonDOM.onpointercancel = e => this.handleButtonMouseUp();\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = e => {\r\n              this.handleButtonClicked(button);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = e => this.handleButtonMouseUp();\r\n            buttonDOM.ontouchcancel = e => this.handleButtonMouseUp();\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = () => {\r\n              this.isMouseHold = false;\r\n              this.handleButtonClicked(button);\r\n            };\r\n            buttonDOM.onmousedown = e => {\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute(\"data-skBtn\", button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        let buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\r\n\r\n        /**\r\n         * Adding display label\r\n         */\r\n        buttonDOM.setAttribute(\"data-displayLabel\", buttonDisplayName);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        let buttonSpanDOM = document.createElement(\"span\");\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(\r\n        rowDOM,\r\n        rIndex,\r\n        containerStartIndexes,\r\n        containerEndIndexes\r\n      );\r\n\r\n      /**\r\n       * Appending row to keyboard\r\n       */\r\n      this.keyboardDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling onpointerup\r\n       */\r\n      /* istanbul ignore next */\r\n      if (\r\n        this.utilities.pointerEventsSupported() &&\r\n        !useTouchEvents &&\r\n        !useMouseEvents\r\n      ) {\r\n        document.onpointerup = () => this.handleButtonMouseUp();\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = e => this.handleButtonMouseUp();\r\n        document.ontouchcancel = e => this.handleButtonMouseUp();\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = () => this.handleButtonMouseUp();\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport default SimpleKeyboard;\r\n","import Keyboard from \"simple-keyboard\";\nimport \"simple-keyboard/build/css/index.css\";\nimport \"./index.css\";\n\nlet keyboard = new Keyboard({\n  onChange: input => onChange(input),\n  onKeyPress: button => onKeyPress(button)\n});\n\n/**\n * Update simple-keyboard when input is changed directly\n */\ndocument.querySelector(\".input\").addEventListener(\"input\", event => {\n  keyboard.setInput(event.target.value);\n});\n\nconsole.log(keyboard);\n\nfunction onChange(input) {\n  document.querySelector(\".input\").value = input;\n  console.log(\"Input changed\", input);\n}\n\nfunction onKeyPress(button) {\n  console.log(\"Button pressed\", button);\n\n  /**\n   * If you want to handle the shift and caps lock buttons\n   */\n  if (button === \"{shift}\" || button === \"{lock}\") handleShift();\n}\n\nfunction handleShift() {\n  let currentLayout = keyboard.options.layoutName;\n  let shiftToggle = currentLayout === \"default\" ? \"shift\" : \"default\";\n\n  keyboard.setOptions({\n    layoutName: shiftToggle\n  });\n}\n"]}